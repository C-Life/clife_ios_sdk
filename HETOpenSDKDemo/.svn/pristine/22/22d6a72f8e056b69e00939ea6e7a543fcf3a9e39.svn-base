//
//  HETBLESleepButtonDevice.m
//  HETOpenSDKDemo
//
//  Created by mr.cao on 16/2/18.
//  Copyright © 2016年 mr.cao. All rights reserved.
//

#import "HETBLESleepButtonDevice.h"
#import "HETBLEManagerApi.h"
#import "HETBLEProtocol.h"
#import <UIKit/UIKit.h>
#import "HETDeviceControlBusiness.h"
@interface HETBLESleepButtonDevice()
{
    HETBLEManagerApi *_hetBLEManagerApi;
    NSString *_deviceId;
}

@property(nonatomic,strong) UIAlertView *blueToothPowerAlert;

@end

@implementation HETBLESleepButtonDevice


static HETBLESleepButtonDevice *_sharedInstance = nil;
+ (HETBLESleepButtonDevice *)sharedInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[HETBLESleepButtonDevice alloc] init];
    });
    return _sharedInstance;
}



-(void )initBLEBroadName:(NSString *)broadName  withDeviceId:(NSString*)deviceId{
    
       NSAssert(broadName, @"broadName为空");
       NSAssert(deviceId, @"deviceId为空");
        _deviceId=deviceId;
      
        if(_hetBLEManagerApi)
        {
            
            _hetBLEManagerApi.currentBroadName=broadName;
            
        }
       else
       {
           _hetBLEManagerApi=[[HETBLEManagerApi alloc]init];
           _hetBLEManagerApi.currentPeripheral=nil;
           _hetBLEManagerApi.currentBroadName=broadName;
       }
  

}

-(instancetype)init{
    if (self=[super init])
    {
        //调用下这个蓝牙提前初始化，防止获取蓝牙状态的时候状态错乱
        [[CLBLEManager sharedInstance]manager];
        
        
        _hetBLEManagerApi=[[HETBLEManagerApi alloc]init];
        _hetBLEManagerApi.currentPeripheral=nil;
        [[NSNotificationCenter defaultCenter] removeObserver:self name:kLGPeripheralDidDisconnect object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(checkBleDisconnect:) name:kLGPeripheralDidDisconnect object:nil];
        [[NSNotificationCenter defaultCenter] removeObserver:self name:kLGPeripheralDidUpdateState object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showBLEPowerState:) name:kLGPeripheralDidUpdateState object:nil];
    }
    return self;
}
-(void)dealloc
{
    [[NSNotificationCenter defaultCenter ]removeObserver:self];
}
/**
 *  检测蓝牙断开
 */
- (void)checkBleDisconnect:(NSNotification*)notification {
    
    _hetBLEManagerApi.currentPeripheral=nil;
}

-(void)showBLEPowerState:(NSNotification*)notification{
    NSDictionary* dic=[notification userInfo];
    NSNumber* state=[dic objectForKey:kLGPeripheralDidUpdateState];
    if (state.intValue!=CBCentralManagerStatePoweredOn) {
       
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.blueToothPowerAlert show];
        });
    }
    else{
        [self.blueToothPowerAlert dismissWithClickedButtonIndex:0 animated:YES];
    }
}


-(UIAlertView*)blueToothPowerAlert{
    if (!_blueToothPowerAlert) {
        _blueToothPowerAlert = [[UIAlertView alloc] initWithTitle: @"蓝牙设置" message:@"手机蓝牙未开启，请先打开手机蓝牙." delegate:self cancelButtonTitle:@"关闭" otherButtonTitles:nil, nil];
    }
    return _blueToothPowerAlert;
}


/**
 *  获取历史数据
 *
 *  @param success
 *  @param fail
 */
-(void)fetchHistoryDataWithSuccessBlock:(void(^)(HETBLESleepButtonDeviceInfo *deviceInfo))successBlock
                              FailBlock:(void(^)(NSError* error))failBlock
     ProgressiveBlock:(void (^)(NSInteger totalBytesRead, NSInteger totalBytesExpected))progressiveBlock
{
    [_hetBLEManagerApi setProgressiveBlock:^(NSInteger totalBytesRead, NSInteger totalBytesExpected) {
        NSLog(@"===datareceive===%ld,%ld",(long)totalBytesRead,(long)totalBytesExpected);
        
        progressiveBlock(totalBytesRead,totalBytesExpected);
    }];

    
    [_hetBLEManagerApi fetchHistoryDataWithSuccessBlock:^(NSData *data) {
        
        HETBLEReform *transFormData = [HETBLEProtocol transformData:data];
        if (transFormData.body.length > 0) {
           //上传历史数据，上传历史数据成功后需要删除历史数据
            //successBlock(transFormData.body);
            NSLog(@"上传历史数据: %@",transFormData.body);
            uint16_t deviceSoftVersion = transFormData.device_software_version;
            unsigned char battery = transFormData.encrypt_category;
            NSLog(@"deviceSoftVersion = %hu", deviceSoftVersion);
            HETBLESleepButtonDeviceInfo *info=[[HETBLESleepButtonDeviceInfo alloc]init];
            NSString *softVersion = [NSString stringWithFormat:@"%d.%d.%d",(deviceSoftVersion&0x7c00)>>10,(deviceSoftVersion&0x0370)>>5,(deviceSoftVersion&0x001f)];
            
            info.deviceId=_deviceId;
            info.battery=@(battery);
            info.bleVersion=softVersion;
            //NSDictionary *dic=@{@"softVersion":softVersion,@"battery":@(battery)};
            
            
            HETDeviceControlBusiness *business=[[HETDeviceControlBusiness alloc]init];
            
            [business uploadDeviceDataWithDeviceID:_deviceId dataType:HETBLEDeviceHistoryDataUploadType data:data success:^(id responseObject) {
                NSLog(@"上传历史数据成功:%@",responseObject);
                successBlock(info);
                
                //删除历史数据
                [self deleteHistoryDataWithSuccessBlock:^(NSData *data) {
                    NSLog(@"删除历史数据成功:%@",data);
                } FailBlock:^(NSError *error) {
                     NSLog(@"删除历史数据失败:%@",error);
                }];
            } failure:^(NSError *error) {
                NSLog(@"上传历史数据失败:%@",error);
                failBlock(error);
                
            }];

        }
        else
        {
            NSLog(@"历史数据为空");
            successBlock(nil);
        }

        
    } FailBlock:^(NSError *error) {
        failBlock(error);
    }];
}



/**
 *  清除历史数据
 *
 *  @param success
 *  @param fail
 */
-(void)deleteHistoryDataWithSuccessBlock:(void(^)(NSData* data))successBlock
                               FailBlock:(void(^)(NSError* error))failBlock
{
    [_hetBLEManagerApi deleteHistoryDataWithSuccessBlock:^(NSData *data) {
        
        successBlock(data);
        
    } FailBlock:^(NSError *error) {
        
        failBlock(error);
        
    }];
}



@end
