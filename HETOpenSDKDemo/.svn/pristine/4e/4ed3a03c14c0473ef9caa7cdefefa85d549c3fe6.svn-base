//
//  BLEHeader.h
//  IDOIAP
//
//  Created by wady on 1/4/13.
//  Copyright (c) 2013 ccc. All rights reserved.
//

#ifndef IDOIAP_BLEHeader_h
#define IDOIAP_BLEHeader_h

#define MAX_PACK_LEN 2048
#define MAX_SEND_LEN 1024
#define MAX_SINGLE_PACKET_LEN 20

/* 原来旧的协议 命令字 begin */

/* 请求和应答同步数据指令 */
#define REQUEST_GET_DATA_COMMAND            0X0031
#define RESPONSE_GET_DATA_COMMAND           0XA031

/* 请求和应答删除数据指令 */
#define REQUEST_DELETE_DATA_COMMAND         0X0035
#define RESPONSE_DELETE_DATA_COMMAND        0XA035

/* 请求和应答实时数据指令 */
#define REQUEST_REALTIME_DATA_COMMAND       0X0037
#define RESPONSE_REALTIME_DATA_COMMAND      0XA037

/* 请求和应答确认固件升级指令 */
#define REQUEST_CONFIRM_UPGRADE_COMMAND      0X0039
#define RESPONSE_CONFIRM_UPGRADE_COMMAND     0XA039

/* 协议起始标识 结束标识 */
#define BLE_PROTOCOL_START_FLAG             0XF2
#define BLE_PROTOCOL_END_FLAG               0XF3

/* 原来旧的协议 命令字 end */


/* 新协议 命令字 begin */
/* 请求和应答协议版本命令字*/
#define REQUEST_PROTOCOL_VERSION                0X4001
#define RESPONSE_PROTOCOL_VERSION               0X0001

#define REQUEST_BIND_BLE_DEVICE                 0X4002      // 请求绑定设备
#define RESPONSE_BIND_BLE_DEVICE                0X0002      // 应答

#define REQUEST_SYNC_DATA                       0X4006      // 请求同步数据
#define RESPONSE_SYNC_DATA                      0X0006      // 应答

#define REQUEST_KEY_DATA                        0X4008      // 请求数据
#define RESPONSE_KEY_DATA                       0X0008      // 应答

#define REQUEST_DELETE_DATA                     0X4010      // 请求删除数据
#define RESPONSE_DELETE_DATA                    0X0010      // 应答

#define REQUEST_UPGRADE_FIREWARE                0X4012      // 请求升级固件
#define RESPONSE_UPGRADE_FIREWARE               0X0012      // 应答
/* 新协议 命令字 end */

/* 协议类型 */
#define PROTOCOL_TYPE_UPGRADE                   0x10        // 升级协议
#define PROTOCOL_TYPE_BUSINESS                  0x00        // 业务协议
#define PROTOCOL_TYPE_BIND                      0x02        // 绑定协议


#import <CoreBluetooth/CoreBluetooth.h>

#pragma pack(push) // 将当前pack设置压栈保存
#pragma pack(1) // 必须在结构体定义之前使用

//蓝牙协议包数据结构
typedef struct
{
    uint8_t         startflag;                  //起始标志      0XF2
    uint16_t        device_software_version;    //终端软件版本号
    uint16_t        protocol_version;           //协议版本号
    uint8_t         encrypt_category;           //数据加密分类
    uint16_t        cmd_no;                     //命令字
    uint8_t         uniqueID[6];                //唯一ID
    uint8_t         timezone;                   //时区
    uint8_t         time[7];                    //协议时间
    uint16_t        body_length;                //数据长度
    
} Ble_Protocol_Head_T;

typedef struct{
    Ble_Protocol_Head_T*   head;
    uint8_t                *body;         //包体
    uint8_t                endflag;                    //结束标志      0xF3
}Ble_Protocol_Packet_T;

//新的蓝牙协议包数据结构
typedef struct
{
    uint8_t         startflag;                  //起始标志      0XF2
    uint8_t         protocol_type;              //协议类型  升级协议:0x10 业务协议:0x00 绑定协议:0x02
    uint8_t         protocol_version;           //协议版本号
    uint8_t         reserved;                   //保留字节
    uint8_t         time[6];                    //协议时间  年以2010为基数往上累加
    uint8_t         timezone;                   //时区
    UInt16          frame_control;              //操作命令字
    uint16_t        body_length;                //数据长度
} Ble_Protocol_Head_New;

typedef struct{
    Ble_Protocol_Head_New*   head;
    uint8_t                 *body;              //包体
    uint16_t                 packet_fcs;        //FCS校验
}Ble_Protocol_Packet_New;


#pragma pack(pop)

typedef enum {
    PROXIMITY_STATE_UNINITIALIZED,
    PROXIMITY_STATE_CONNECTING,
    PROXIMITY_STATE_BONDING,
    PROXIMITY_STATE_BONDED,
    PROXIMITY_STATE_CLOSING,
    PROXIMITY_STATE_CLOSE,
    PROXIMITY_STATE_REMOTING,
    PROXIMITY_STATE_REMOTE,
    PROXIMITY_STATE_LINK_LOST,
    PROXIMITY_STATE_DISCONNECTED,
    PROXIMITY_STATE_DESCOVING,
    PROXIMITY_STATE_DISCONNECTING,
} ProximityState;

#endif
