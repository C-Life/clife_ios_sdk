//
//  BLEManager.h
//  BLEForCSleep
//
//  Created by mr.cao on 15/6/1.
//  Copyright (c) 2015年 Het. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "CLBLEBaseApi.h"
extern NSString * const kLGPeripheralDidFound;

#pragma mark - Error Domains -

/**
 * Error domains for Connection errors
 */
// Error Domains
extern NSString * const kCLBLEManagerErrorDomain;
// Error Codes
extern const NSInteger kBLEBoardNameErrorCode;
extern const NSInteger kBLEConnectErrorCode;
extern const NSInteger kBLECommunConnectErrorCode;
extern const NSInteger kBLERecvDataErrorCode;
extern const NSInteger kBLEBusyErrorCode;
extern const NSInteger kBLEUUIDErrorCode;
extern const NSInteger kBLEFindErrorCode;
extern const NSInteger kBLEReadCharactErrorCode;
extern const NSInteger kBLEWriteCharactErrorCode;
extern const NSInteger kBLETimeOutErrorCode;
extern const NSInteger kBLEObjErrorCode;

extern NSString * const kBLEBoardNameErrorCodeErrorMessage;
extern NSString * const kBLEConnectErrorCodeErrorMessage;
extern NSString * const kBLECommunConnectErrorCodeErrorMessage;
extern NSString * const kBLERecvDataErrorCodeErrorMessage;
extern NSString * const kBLEBusyErrorCodeErrorMessage;
extern NSString * const kBLEUUIDErrorCodeErrorMessage;
extern NSString * const kBLEFindErrorCodeErrorMessage;
extern NSString * const kBLEReadCharactErrorCodeErrorMessage;
extern NSString * const kBLEWriteCharactErrorCodeErrorMessage;
extern NSString * const kBLETimeOutErrorCodeErrorMessage;
extern NSString * const kBLEObjErrorCodeErrorMessage;


@protocol CLBLEManagerDelegate <NSObject>

-(void)scanAllPeripherals:(NSArray *)allLGPeripherals;

@end

@interface CLBLEManager : NSObject

@property (strong, nonatomic) LGPeripheral  *currentLGPeripheral;
@property (strong, nonatomic) CBCentralManager *manager;
+(CLBLEManager *)sharedInstance;


//初始化蓝牙并设置读取数据的回调，自动扫描，如果扫描设备名字broadName为空，则扫描所有设备并返回列表，如果broadName不为空则返回连接上的蓝牙设备
-(void)scanbleWithObject:(id<CLBLEDataSource>)child
         withScanTimeOut:(NSInteger)timeOut;
     //scanPeripheralBlock:(void (^)(NSArray *peripherals,NSError *error))scanPeripheralBlock;
//连接蓝牙
//-(void)conntectPeripheral:(LGPeripheral *)peripheral withResultBlock:(void(^)(NSError *error))connectResultBlock;

-(void)conntectPeripheralWithBLEDataSource:(id<CLBLEDataSource>)child
                           withResultBlock:(void(^)(LGPeripheral* peripheral,NSError *error))connectResultBlock;
//OAD空中升级的时候必须先扫描后连接
-(void)oadConntectPeripheralWithBLEDataSource:(id<CLBLEDataSource>)child
                           withResultBlock:(void(^)(LGPeripheral* peripheral,NSError *error))connectResultBlock;

//发送数据
-(void)sendData:(NSData *)data peripheral:(LGPeripheral *)peripheral;
//设置Notify
-(void)setNotify:(LGPeripheral *)peripheral WithCBUUID:(CBUUID *)sCBUUID cCBUUID:(CBUUID *)cCBUUID withResultBlock:(void(^)(NSError *error))resultBlock withResultBlock:(void(^)(NSData *data,NSError *error))readDataBlock;
//断开蓝牙
-(void)disconntectPeripheral:(LGPeripheral *)peripheral withResultBlock:(void(^)(NSError *error))aCallback;
//一对多delegate
-(void) addBleDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue;
-(void) removeBleDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue;


@end
