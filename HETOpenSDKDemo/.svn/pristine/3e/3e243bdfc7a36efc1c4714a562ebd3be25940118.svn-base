//
//  MainViewController.m
//  HETOpenSDKDemo
//
//  Created by mr.cao on 16/1/21.
//  Copyright © 2016年 mr.cao. All rights reserved.
//

#import "MainViewController.h"
#import "HETDeviceControlBusiness.h"
#import "SVPullToRefresh.h"

#import "HETBLEHead.h"
@interface MainViewController ()<UITableViewDataSource,UITableViewDelegate>
{
    NSArray *_allDeviceDataSouce;
    
    int _progress;
    NSMutableArray *_selectedDevArray;
    NSInteger _realTimeFailCount;
    NSInteger _zeroRealTimeFailCount;
    UILabel *_progressLable;
    
    
}
@property(strong,nonatomic)UITableView *scanDeviceTableView;
@property(strong,nonatomic)UIView      *bottomView;
@property(strong,nonatomic)UIButton    *beginBindButton;
@property(strong,nonatomic)HETBLEManagerApi *mattressBLEApi;
@property(strong,nonatomic)UIAlertView *blueToothPowerAlert;
@property(strong,nonatomic)NSString   *currentBroadName;
@end

@implementation MainViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
     self.view.backgroundColor=[UIColor whiteColor];
    [self.view addSubview:self.scanDeviceTableView];
    [self.view addSubview:self.bottomView];
    [self.view addSubview:self.beginBindButton];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    if (IOS_IS_AT_LEAST_7) {
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
    self.navigationController.navigationBar.translucent = NO;

    [self setNavigationBarTitle:@"我的设备"];
    [self setLeftBarButtonItemHide:YES];
    __weak MainViewController *weakSelf = self;

     [self.scanDeviceTableView addPullToRefreshWithActionHandler:^{
         
         //获取绑定的设备列表
         
         HETDeviceControlBusiness *bussiness=[[HETDeviceControlBusiness alloc]init];
         [bussiness fetchAllBindDeviceSuccess:^(id responseObject) {
             NSLog(@"%@",responseObject);
             _allDeviceDataSouce=[responseObject objectForKey:@"data"];
             [weakSelf.scanDeviceTableView reloadData];
             [weakSelf.scanDeviceTableView.pullToRefreshView stopAnimating];

             
         } failure:^(NSError *error) {
             _allDeviceDataSouce=nil;
            [weakSelf.scanDeviceTableView reloadData];
             [weakSelf.scanDeviceTableView.pullToRefreshView stopAnimating];

         }];
 
         
     }];
    
    [self.scanDeviceTableView triggerPullToRefresh];

   

    
    
}
//开始绑定新设备
- (void)bindAction
{
    [self scanBleDeviceAction];
}

-(void)scanBleDeviceAction{
    if ([CLBLEManager sharedInstance].manager.state==CBCentralManagerStatePoweredOff) {
        [self.blueToothPowerAlert show];
        return;
    }
    [[CLBLEManager sharedInstance] removeBleDelegate:self delegateQueue:dispatch_get_main_queue()];
    
    [[CLBLEManager sharedInstance] disconntectPeripheral:self.mattressBLEApi.currentPeripheral  withResultBlock:^(NSError *error) {
        
    }];
    if(_mattressBLEApi)
    {
        [_mattressBLEApi stopFetchRealTimeData];
        _mattressBLEApi=nil;
    }
    _mattressBLEApi=[[HETBLEManagerApi alloc] init];
    [[CLBLEManager sharedInstance] scanbleWithObject:self.mattressBLEApi withScanTimeOut:5];
    
    [[CLBLEManager sharedInstance] addBleDelegate:self delegateQueue:dispatch_get_main_queue()];
}

#pragma mark 蓝牙搜索到设备
-(void)scanAllPeripherals:(NSArray *)allLGPeripherals{
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(checkScanBleDevice) object:nil];
    });
    
    NSArray* filterArray=nil;
    
 
    //这个地方要过滤一下对应的设备，设备的广播名规则是het-mac-x-y
    //x 表示打类型，y表示小类型，如果看不懂这个地方请找Sandywu
    NSString *deviceStr=[NSString stringWithFormat:@"-%@-",@(26)];
    NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",deviceStr];
    filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
    /*if (deviceTypeId == MattressDeviceType) {
     NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",@"-6-"];
     filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
     }
     if (deviceTypeId == SnoringdetectionDeviceType) {
     NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",@"-9-"];
     filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
     }
     if (deviceTypeId == CoughDetectionDeviceType) {
     NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",@"-29-"];
     filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
     }
     if (deviceTypeId== SleepButtonDeviceType) {
     NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",@"-26-"];
     filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
     }*/
    if(filterArray.count)
    {
        [self bindCurrentSelectedDevice:[filterArray firstObject]];
        /*CLALLBleDeviceViewController *vc=[[CLALLBleDeviceViewController alloc]init];
         vc.deviceType=deviceTypeId;
         vc.deviceSubtypeId=deviceSubTypeId;
         vc.deviceIcon=deviceIcon;
         vc.bShowToastView=self.bShowToastView;
         //vc.bWaterBLEProtocol=self.bWaterBLEProtocol;
         vc.bleBussinesType=self.bleBussinesType;
         vc.devicesDataSource=[NSMutableArray arrayWithArray:filterArray];
         [self.navigationController pushViewController:vc animated:YES];*/
    }
    else
    {
        
        
    }
    
    
}

-(void)checkScanBleDevice
{
    
    
}

- (void)bindCurrentSelectedDevice:(LGPeripheral *)curPeripheral {
    __weak MainViewController* weakSelf=self;
    self.currentBroadName=curPeripheral.name;
    
    _mattressBLEApi=nil;
    _mattressBLEApi=[[HETBLEManagerApi alloc] init];
    //NSString *currentMacKey=[NSString stringWithFormat:@"%ld_currentMacKey",(long)self.deviceType];
    //[[NSUserDefaults standardUserDefaults] setObject:curPeripheral.name forKey:currentMacKey];
    
    self.mattressBLEApi.currentBroadName=curPeripheral.name;
    self.mattressBLEApi.currentPeripheral=curPeripheral;
    [self.mattressBLEApi fetchRealTimeDataWithInterVal:9
                                             WithTimes:3
                                          SuccessBlock:^(NSData *data) {
                                              [weakSelf receiveBleRealTimeData:data withPeripheral:curPeripheral];
                                          } FailBlock:^(NSError *error) {
                                              if (_realTimeFailCount+_zeroRealTimeFailCount>=2) {
                                                  [weakSelf.mattressBLEApi stopFetchRealTimeData];
                                                  //[weakSelf gotoBindFailed];
                                                  _realTimeFailCount=0;
                                                  _zeroRealTimeFailCount=0;
                                              }
                                              else{
                                                  _realTimeFailCount++;
                                              }
                                          }];
  
}
/**
 *  获取蓝牙设备传过来的实时数据
 */
- (void)receiveBleRealTimeData:(NSData *)dData withPeripheral:(LGPeripheral *) peripheral{
    
    
    HETBLEReform* transReform=[HETBLEProtocol transformData:dData];
    if (!transReform) {
        NSLog(@"数据包结构错误");
        return;
    }
    [self.mattressBLEApi stopFetchRealTimeData];
    
    [self sendDeviceBindRequest:transReform withPeripheral:peripheral];
    
    
}
-(NSString *)currentTimeOffset{
    time_t t = time(NULL);
    struct tm lt = {0};
    localtime_r(&t, &lt);
    long hour=lt.tm_gmtoff/3600;
    long minute=(lt.tm_gmtoff%3600)*60;
    
    if (hour<0) {
        return [NSString stringWithFormat:@"%05ld",hour*100+minute];
    }
    return [NSString stringWithFormat:@"%04ld",hour*100+minute];
}
//发送绑定关系到服务器
- (void)sendDeviceBindRequest:(HETBLEReform *)tranform withPeripheral:(LGPeripheral *) peripheral {
    
    //NSString *timeZone=[self currentTimeOffset];
    //int zone = timeZone.intValue*60/100;
    LGPeripheral *pro =peripheral;
    const unsigned char *CMac = (const  unsigned char *)[tranform.uniqueID bytes];
    NSString *mac = [NSString stringWithFormat:@"%02X%02X%02X%02X%02X%02X",CMac[0],CMac[1],CMac[2],CMac[3],CMac[4],CMac[5]];
    NSArray *resultArr = [pro.name componentsSeparatedByString:@"-"];
    NSString *type=  [resultArr objectAtIndex:2];//[pro.name substringWithRange:NSMakeRange(11, 1)];
    NSString *deviceSubtypeId=  [resultArr objectAtIndex:3];//[pro.name substringFromIndex:pro.name.length-1];
    //bleBindDic = [NSDictionary dictionaryWithObjectsAndKeys:userID,@"userId",houseID,@"houseId",timeZone,@"timeZone",mac,@"mac",type,@"deviceType",deviceSubtypeId,@"deviceSubtypeId", @(2), @"bindType", nil];
    
    int bindType = 2; //绑定类型（1-WiFi  2-蓝牙）
    HETDeviceControlBusiness *business=[[HETDeviceControlBusiness alloc]init];
    
    [business bindDeviceWithDeviceMAC:mac deviceBrandId:1 deviceTypeId:type.intValue deviceSubtypeId:deviceSubtypeId.intValue bindType:bindType success:^(id responseObject) {
        NSDictionary *result = responseObject;
        NSInteger code= [[(NSDictionary *)result objectForKey:@"code"] integerValue];
        if (code!=0) {
            
            return ;
        }
        
        //NSString *deviceId = [(NSDictionary *)result objectForKey:@"data"];
        [[NSUserDefaults standardUserDefaults] setObject:peripheral.name forKey:@"cCurrentName"];
         self.currentBroadName = pro.name;
        [[NSUserDefaults standardUserDefaults] synchronize];
        //绑定成功，刷新所有设备列表
        [self.scanDeviceTableView triggerPullToRefresh];
        
        
    } failure:^(NSError *error) {
        NSLog(@"绑定失败");
        
    }];
    
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
#pragma mark - UITableViewDataSource,UITableViewDelegate
- (NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _allDeviceDataSouce.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 44;
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if(!_allDeviceDataSouce.count)
    {
        NSString *cellID = @"myCell";
        UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellID];
        if(cell==nil)
        {
            cell= [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
        }
        cell.backgroundColor=[UIColor clearColor];
        
        return cell;
    }
    else
    {
        NSString *cellID = @"myCell";
        UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellID];
        if(cell==nil)
        {
            cell= [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
        }
        for (id subView in cell.contentView.subviews) {
            [subView removeFromSuperview];
        }
    
        NSDictionary *dic=[_allDeviceDataSouce objectAtIndex:indexPath.row];
        
        NSString *imageUrl=[dic objectForKey:@"deviceIcon"];
        UIImage *iconImage=nil;
        NSData *imageData=[NSData dataWithContentsOfURL:[NSURL URLWithString:imageUrl]];
        if(!imageData&&imageData.length)
        {
            iconImage=[UIImage imageWithData:imageData];
        }
        else
        {
            iconImage=[UIImage imageNamed:@"bingxiang_deviceBind"];
        }
        
        NSString *deviceName=[dic objectForKey:@"deviceName"];
        NSString *deviceMac=[dic objectForKey:@"macAddress"];
        NSString *deviceOnOff=[dic objectForKey:@"onlineStatus"];
        UIImageView *iconImageView=[[UIImageView alloc]initWithFrame:CGRectMake(5, 44/2.0-34/2.0, 34*iconImage.size.width/iconImage.size.height, 34)];
        iconImageView.image=iconImage;
        [cell.contentView addSubview:iconImageView];
        
        UILabel *deviceNameLable=[[UILabel alloc]initWithFrame:CGRectMake(iconImageView.frame.origin.x+iconImageView.frame.size.width+10, 0, 200, 25)];
        deviceNameLable.text=deviceName;
        deviceNameLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceNameLable];
        
        UILabel *deviceMacLable=[[UILabel alloc]initWithFrame:CGRectMake(iconImageView.frame.origin.x+iconImageView.frame.size.width+10, 25, 200, 25)];
        deviceMacLable.text=deviceMac;
        deviceMacLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceMacLable];
        
        
        UILabel *deviceOnoffLable=[[UILabel alloc]initWithFrame:CGRectMake(tableView.frame.size.width-60, 0, 50, 50)];
        if(deviceOnOff.intValue==1)
        {
            deviceOnoffLable.text=@"在线";
            deviceOnoffLable.textColor=[UIColor blueColor];
        }
        else
        {
            deviceOnoffLable.text=@"离线";
            deviceOnoffLable.textColor=[UIColor grayColor];
        }
        
        deviceOnoffLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceOnoffLable];
        cell.backgroundColor=[UIColor clearColor];
        return cell;
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    NSMutableDictionary *deviceDic =_allDeviceDataSouce[indexPath.row];

    NSString *deviceID=[deviceDic objectForKey:@"deviceId"];
    NSString *name=[[NSUserDefaults standardUserDefaults]objectForKey:@"cCurrentName"];
    //上传历史数据
    if(!_mattressBLEApi)
    {
        _mattressBLEApi=[[HETBLEManagerApi alloc] init];
    }
    _mattressBLEApi.currentBroadName=name;
      __weak MainViewController* weakSelf=self;
    
    [_mattressBLEApi fetchHistoryDataWithSuccessBlock:^(NSData *data) {
   
        
        HETBLEReform *transform = [HETBLEProtocol transformData:data];
        [weakSelf postHistoryDataToServer:transform.body :deviceID];
        
    } FailBlock:^(NSError *error) {
        NSLog(@"获取历史数据失败:%@",error);
        
    }];
    
    
    
}

//上传历史数据到后台
- (void)postHistoryDataToServer:(NSData*)data :(NSString*)deviceID{
  
    if(data.length)
    {
        HETDeviceControlBusiness *business1=[[HETDeviceControlBusiness alloc]init];
        
        [business1 uploadDeviceDataWithDeviceID:deviceID dataType:2 data:data success:^(id responseObject) {
            NSLog(@"上传历史数据成功:%@",responseObject);
        } failure:^(NSError *error) {
            NSLog(@"上传历史数据失败:%@",error);
 
        }];

    }
}

-(void)viewDidLayoutSubviews {
    
    if ([self.scanDeviceTableView respondsToSelector:@selector(setSeparatorInset:)]) {
        [self.scanDeviceTableView setSeparatorInset:UIEdgeInsetsZero];
        
    }
    if ([self.scanDeviceTableView respondsToSelector:@selector(setLayoutMargins:)])  {
        [self.scanDeviceTableView setLayoutMargins:UIEdgeInsetsZero];
    }
    
}

-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPat{
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]){
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
}

#pragma mark 初始化UITableView
-(UITableView *)scanDeviceTableView
{
    if(!_scanDeviceTableView)
    {
        _scanDeviceTableView = [[UITableView alloc] initWithFrame:CGRectMake(0,0,CGRectGetWidth([UIScreen mainScreen].bounds), CGRectGetHeight([UIScreen mainScreen].bounds)-44) style:UITableViewStyleGrouped];
        _scanDeviceTableView.delegate = self;
        _scanDeviceTableView.dataSource = self;
        _scanDeviceTableView.backgroundColor = [UIColor clearColor];
        _scanDeviceTableView.separatorStyle=UITableViewCellSeparatorStyleSingleLine;
        _scanDeviceTableView.tableFooterView=[UIView new];
    }
    return _scanDeviceTableView;
}
#pragma mark-----底部view
-(UIView *)bottomView
{
    if(!_bottomView)
    {
        _bottomView=[[UIView alloc]initWithFrame:CGRectMake(0, CGRectGetHeight([UIScreen mainScreen].bounds)-64-44, CGRectGetWidth([UIScreen mainScreen].bounds), 44)];
        _bottomView.backgroundColor=[self colorFromHexRGB:@"2E7BD3"];
        
    }
    return _bottomView;
}
#pragma mark-----开始绑定按钮
-(UIButton *)beginBindButton
{
    if(!_beginBindButton)
    {
        UIButton *nextBtn = [UIButton buttonWithType:UIButtonTypeSystem];
        nextBtn.frame =  CGRectMake(0, _bottomView.frame.origin.y+_bottomView.frame.size.height/2-_bottomView.frame.size.height*0.8/2, CGRectGetWidth([UIScreen mainScreen].bounds), _bottomView.frame.size.height*0.8);
        [nextBtn setTitle:@"绑定蓝牙设备" forState:UIControlStateNormal];
        [nextBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [nextBtn addTarget:self action:@selector(bindAction) forControlEvents:UIControlEventTouchUpInside];
        _beginBindButton=nextBtn;
        
    }
    return _beginBindButton;
    
}
@end
