//
//  MainViewController.m
//  HETOpenSDKDemo
//
//  Created by mr.cao on 16/1/21.
//  Copyright © 2016年 mr.cao. All rights reserved.
//

#import "MainViewController.h"
#import <HETOpenSDK/HETDeviceRequestBusiness.h>
#import "SVPullToRefresh.h"
#import <HETOpenSDK/HETDeviceRequestBusiness.h>
#import <HETOpenSDK/HETBLEHead.h>
#import <HETOpenSDK/HETBLESleepButtonDevice.h>
#import <HETOpenSDK/HETWIFIAromaDiffuserDevice.h>
#import <HETOpenSDK/HETBLEMattressDevice.h>
#import "ScanWIFIViewController.h"
#import "AromaDiffuserViewController.h"
@interface MainViewController ()<UITableViewDataSource,UITableViewDelegate>
{
    NSArray *_allDeviceDataSouce;
    
    int _progress;
    NSMutableArray *_selectedDevArray;
    NSInteger _realTimeFailCount;
    NSInteger _zeroRealTimeFailCount;
    UILabel *_progressLable;
    
    HETWIFIAromaDiffuserDevice *_device;
    
    
}
@property(strong,nonatomic)UITableView *scanDeviceTableView;
@property(strong,nonatomic)UIButton    *bleScanButton;
@property(strong,nonatomic)UIButton    *wifiScanButton;
@property(strong,nonatomic)HETBLEManagerApi *mattressBLEApi;
@property(strong,nonatomic)UIAlertView *blueToothPowerAlert;
@property(strong,nonatomic)NSString   *currentBroadName;
@end

@implementation MainViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
     self.view.backgroundColor=[UIColor whiteColor];
    [self.view addSubview:self.scanDeviceTableView];
    [self.view addSubview:self.wifiScanButton];
    
    [self.view addSubview:self.bleScanButton];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    if (IOS_IS_AT_LEAST_7) {
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
    self.navigationController.navigationBar.translucent = NO;
    
    


    [self setNavigationBarTitle:@"我的设备"];
    [self setLeftBarButtonItemHide:YES];
    __weak MainViewController *weakSelf = self;

     [self.scanDeviceTableView addPullToRefreshWithActionHandler:^{
         
         //获取绑定的设备列表
         
         HETDeviceRequestBusiness *bussiness=[[HETDeviceRequestBusiness alloc]init];
         [bussiness fetchAllBindDeviceSuccess:^(id responseObject) {
             NSLog(@"%@",responseObject);
             _allDeviceDataSouce=[responseObject objectForKey:@"data"];
             [weakSelf.scanDeviceTableView reloadData];
             [weakSelf.scanDeviceTableView.pullToRefreshView stopAnimating];

             
         } failure:^(NSError *error) {
             _allDeviceDataSouce=nil;
            [weakSelf.scanDeviceTableView reloadData];
             [weakSelf.scanDeviceTableView.pullToRefreshView stopAnimating];

         }];
 
         
     }];
    
    [self.scanDeviceTableView triggerPullToRefresh];

   

    
    
}
//扫描WiFi新设备
- (void)wifiBindAction
{
    
    ScanWIFIViewController *vc=[[ScanWIFIViewController alloc]init];
    [self.navigationController pushViewController:vc animated:YES];
}

//扫描蓝牙设备
- (void)bleBindAction
{
    [self scanBleDeviceAction];
}


-(void)scanBleDeviceAction{
    if ([CLBLEManager sharedInstance].manager.state==CBCentralManagerStatePoweredOff) {
        [self.blueToothPowerAlert show];
        return;
    }
    [[CLBLEManager sharedInstance] removeBleDelegate:self delegateQueue:dispatch_get_main_queue()];
    
    [[CLBLEManager sharedInstance] disconntectPeripheral:self.mattressBLEApi.currentPeripheral  withResultBlock:^(NSError *error) {
        
    }];
    if(_mattressBLEApi)
    {
        [_mattressBLEApi stopFetchRealTimeData];
        _mattressBLEApi=nil;
    }
    _mattressBLEApi=[[HETBLEManagerApi alloc] init];
    [[CLBLEManager sharedInstance] scanbleWithObject:self.mattressBLEApi withScanTimeOut:5];
    
    [[CLBLEManager sharedInstance] addBleDelegate:self delegateQueue:dispatch_get_main_queue()];
}

#pragma mark 蓝牙搜索到设备
-(void)scanAllPeripherals:(NSArray *)allLGPeripherals{
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(checkScanBleDevice) object:nil];
    });
    
    NSArray* filterArray=nil;
    
 
    //这个地方要过滤一下对应的设备，设备的广播名规则是het-mac-x-y
    //x 表示打类型，y表示小类型，如果看不懂这个地方请找Sandywu
    NSString *deviceStr=[NSString stringWithFormat:@"-%@-",@(26)];//这里过滤睡眠扣子设备
    NSPredicate* predicate=[NSPredicate predicateWithFormat:@"SELF.name contains[c] %@",deviceStr];
    filterArray=[allLGPeripherals filteredArrayUsingPredicate:predicate];
    if(filterArray.count)
    {
        [self bindCurrentSelectedDevice:[filterArray firstObject]];
    
    }
    else
    {
        
        
    }
    
    
}

-(void)checkScanBleDevice
{
    
    
}

- (void)bindCurrentSelectedDevice:(LGPeripheral *)curPeripheral {
    [[NSUserDefaults standardUserDefaults] setObject:curPeripheral.name forKey:@"cCurrentName"];
    self.currentBroadName = curPeripheral.name;
    [[NSUserDefaults standardUserDefaults] synchronize];

    HETBLESleepButtonDevice *device=[HETBLESleepButtonDevice sharedInstance];
    //[device initBLEBroadName:curPeripheral.name withDeviceId:nil];
    [device bindBleDevice:curPeripheral SuccessBlock:^(NSString *deviceId) {

         NSLog(@"绑定成功");
        //绑定成功，刷新所有设备列表
        [self.scanDeviceTableView triggerPullToRefresh];
        

    } FailBlock:^(NSError *error) {
        NSLog(@"绑定失败");
    }];
    
  
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
#pragma mark - UITableViewDataSource,UITableViewDelegate
- (NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _allDeviceDataSouce.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 44;
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if(!_allDeviceDataSouce.count)
    {
        NSString *cellID = @"myCell";
        UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellID];
        if(cell==nil)
        {
            cell= [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
        }
        cell.backgroundColor=[UIColor clearColor];
        
        return cell;
    }
    else
    {
        NSString *cellID = @"myCell";
        UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellID];
        if(cell==nil)
        {
            cell= [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
        }
        for (id subView in cell.contentView.subviews) {
            [subView removeFromSuperview];
        }
        
        NSDictionary *dic=[_allDeviceDataSouce objectAtIndex:indexPath.row];
        
        NSString *imageUrl=[dic objectForKey:@"deviceIcon"];
        UIImage *iconImage=nil;
        NSData *imageData=[NSData dataWithContentsOfURL:[NSURL URLWithString:imageUrl]];
        if(!imageData&&imageData.length)
        {
            iconImage=[UIImage imageWithData:imageData];
        }
        else
        {
            iconImage=[UIImage imageNamed:@"bingxiang_deviceBind"];
        }
        
        NSString *deviceName=[dic objectForKey:@"deviceName"];
        NSString *deviceMac=[dic objectForKey:@"macAddress"];
        NSString *deviceOnOff=[dic objectForKey:@"onlineStatus"];
        UIImageView *iconImageView=[[UIImageView alloc]initWithFrame:CGRectMake(5, 44/2.0-34/2.0, 34*iconImage.size.width/iconImage.size.height, 34)];
        iconImageView.image=iconImage;
        [cell.contentView addSubview:iconImageView];
        
        UILabel *deviceNameLable=[[UILabel alloc]initWithFrame:CGRectMake(iconImageView.frame.origin.x+iconImageView.frame.size.width+10, 0, 200, 25)];
        deviceNameLable.text=deviceName;
        deviceNameLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceNameLable];
        
        UILabel *deviceMacLable=[[UILabel alloc]initWithFrame:CGRectMake(iconImageView.frame.origin.x+iconImageView.frame.size.width+10, 25, 200, 25)];
        deviceMacLable.text=deviceMac;
        deviceMacLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceMacLable];
        
        
        UILabel *deviceOnoffLable=[[UILabel alloc]initWithFrame:CGRectMake(tableView.frame.size.width-60, 0, 50, 50)];
        if(deviceOnOff.intValue==1)
        {
            deviceOnoffLable.text=@"在线";
            deviceOnoffLable.textColor=[UIColor blueColor];
        }
        else
        {
            deviceOnoffLable.text=@"离线";
            deviceOnoffLable.textColor=[UIColor grayColor];
        }
        
        deviceOnoffLable.adjustsFontSizeToFitWidth=YES;
        [cell.contentView addSubview:deviceOnoffLable];
        cell.backgroundColor=[UIColor clearColor];
        return cell;
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    NSMutableDictionary *deviceDic =_allDeviceDataSouce[indexPath.row];
    NSString *deviceId=[deviceDic objectForKey:@"deviceId"];
    
    NSString *deviceBindType=[deviceDic objectForKey:@"bindType"];
    NSString *deviceTypeId=[deviceDic objectForKey:@"deviceTypeId"];
    
    NSString *userKey=[deviceDic objectForKey:@"userKey"];
    NSString *macAddress=[deviceDic objectForKey:@"macAddress"];
    NSString *deviceSubtypeId=[deviceDic objectForKey:@"deviceSubtypeId"];
    NSString *deviceOnOff=[deviceDic objectForKey:@"onlineStatus"];
    if(deviceBindType.integerValue==1)//WIFI设备
    {
        
        if(deviceTypeId.integerValue==11&&deviceOnOff.integerValue==1)//香薰机设备并且在线
        {
            AromaDiffuserViewController *vc=[[AromaDiffuserViewController alloc]init];
            vc.deviceDic=deviceDic;
            [self.navigationController pushViewController:vc animated:YES];
            
        }
    }
    else
    {
        NSString *name=[[NSUserDefaults standardUserDefaults]objectForKey:@"cCurrentName"];
        //这里是个例子，测试接口的，例如如果是睡眠扣子，获取历史数据业务
        // HETBLESleepButtonDevice *device=[HETBLESleepButtonDevice sharedInstance];
        HETBLEMattressDevice *device=[HETBLEMattressDevice sharedInstance];
        [device fetchRealTimeDataWithBLEBroadName:name withDeviceId:deviceId SuccessBlock:^(HETBLEMattressDeviceInfo *deviceInfo) {
            NSLog(@"deviceInfo:%@",deviceInfo);
        } FailBlock:^(NSError *error) {
            NSLog(@"error:%@",error);
        }];
        //[device fetchHistoryDatawithBLEBroadName:name withDeviceId:deviceID SuccessBlock:^(HETBLESleepButtonDeviceInfo *deviceInfo) {
        /* [device fetchHistoryDatawithBLEBroadName:name withDeviceId:deviceID SuccessBlock:^() {
         // NSLog(@"deviceInfo:%@",deviceInfo);
         
         
         NSDate *senddate = [NSDate date];
         NSDateFormatter *dateformatter = [[NSDateFormatter alloc] init];
         [dateformatter setDateFormat:@"YYYY-MM-dd"];
         NSString *locationString = [dateformatter stringFromDate:senddate];
         NSLog(@"locationString:%@", locationString);
         
         
         
         NSDate *yesterday = [NSDate dateWithTimeIntervalSinceNow:-(24*60*60)];
         
         NSString *lastlocationString = [dateformatter stringFromDate:yesterday];
         NSLog(@"locationString:%@", lastlocationString);
         
         
         
         HETDeviceRequestBusiness *request=[[HETDeviceRequestBusiness alloc]init];
         
         NSMutableDictionary *params = [[NSMutableDictionary alloc]init];
         [params setValue:deviceID forKey:@"deviceId"];
         [params setValue:locationString forKey:@"startTime"];
         [params setValue:locationString forKey:@"endTime"];
         
         
         [request startRequestWithHTTPMethod:HETRequestMethodGet withRequestUrl:@"https://test.api.clife.cn/v1/device/data/day/list" processParams:params needSign:YES BlockWithSuccess:^(id responseObject) {
         NSLog(@"responseObject:%@",responseObject);
         } failure:^(NSError *error) {
         NSLog(@"error:%@",error);
         }];
         
         } FailBlock:^(NSError *error) {
         NSLog(@"error:%@",error);
         } ProgressiveBlock:^(NSInteger totalBytesRead, NSInteger totalBytesExpected) {
         NSLog(@"%d-%d",totalBytesRead,totalBytesExpected);
         }];*/
        
        //上传历史数据
        /*if(!_mattressBLEApi)
         {
         _mattressBLEApi=[[HETBLEManagerApi alloc] init];
         }
         _mattressBLEApi.currentBroadName=name;
         __weak MainViewController* weakSelf=self;
         
         [_mattressBLEApi fetchHistoryDataWithSuccessBlock:^(NSData *data) {
         
         
         HETBLEReform *transform = [HETBLEProtocol transformData:data];
         [weakSelf postHistoryDataToServer:transform.body :deviceID];
         
         } FailBlock:^(NSError *error) {
         NSLog(@"获取历史数据失败:%@",error);
         
         }];*/
        
    }
    
}



-(void)viewDidLayoutSubviews {
    
    if ([self.scanDeviceTableView respondsToSelector:@selector(setSeparatorInset:)]) {
        [self.scanDeviceTableView setSeparatorInset:UIEdgeInsetsZero];
        
    }
    if ([self.scanDeviceTableView respondsToSelector:@selector(setLayoutMargins:)])  {
        [self.scanDeviceTableView setLayoutMargins:UIEdgeInsetsZero];
    }
    
}

-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPat{
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]){
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
}

#pragma mark 初始化UITableView
-(UITableView *)scanDeviceTableView
{
    if(!_scanDeviceTableView)
    {
        _scanDeviceTableView = [[UITableView alloc] initWithFrame:CGRectMake(0,0,CGRectGetWidth([UIScreen mainScreen].bounds), CGRectGetHeight([UIScreen mainScreen].bounds)-100) style:UITableViewStyleGrouped];
        _scanDeviceTableView.delegate = self;
        _scanDeviceTableView.dataSource = self;
        _scanDeviceTableView.backgroundColor = [UIColor clearColor];
        _scanDeviceTableView.separatorStyle=UITableViewCellSeparatorStyleSingleLine;
        _scanDeviceTableView.tableFooterView=[UIView new];
    }
    return _scanDeviceTableView;
}

#pragma mark-----扫描按钮
-(UIButton *)wifiScanButton
{
    if(!_wifiScanButton)
    {
        UIButton *nextBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        nextBtn.frame =  CGRectMake(0, CGRectGetHeight([UIScreen mainScreen].bounds)-64-100, CGRectGetWidth([UIScreen mainScreen].bounds), 35);
        [nextBtn setTitle:@"扫描WIFI设备" forState:UIControlStateNormal];
        [nextBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [nextBtn addTarget:self action:@selector(wifiBindAction) forControlEvents:UIControlEventTouchUpInside];
        nextBtn.backgroundColor=[self colorFromHexRGB:@"2E7BD3"];
        _wifiScanButton=nextBtn;
        
    }
    return _wifiScanButton;
    
}

-(UIButton *)bleScanButton
{
    if(!_bleScanButton)
    {
        UIButton *nextBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        nextBtn.frame =  CGRectMake(0, CGRectGetHeight([UIScreen mainScreen].bounds)-64-35, CGRectGetWidth([UIScreen mainScreen].bounds), 35);
        [nextBtn setTitle:@"扫描蓝牙设备" forState:UIControlStateNormal];
        [nextBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [nextBtn addTarget:self action:@selector(bleBindAction) forControlEvents:UIControlEventTouchUpInside];
        nextBtn.backgroundColor=[self colorFromHexRGB:@"2E7BD3"];
        _wifiScanButton=nextBtn;
        
    }
    return _wifiScanButton;
    
}
@end
