//
//  WIFICommonProtocol.m
//  NewBindDeviceProject
//
//  Created by mr.cao on 15/6/24.
//  Copyright (c) 2015年 mr.cao. All rights reserved.
/**
 * v41版本协议格式
 * -------------------------------------------------------------------------------------------------------------------------
 * | 0xF2 | Protocol Version | Protocol Type | Command Type | Mac Addr | Device Type | Reserved | Length | Frame Body | FCS  |
 * |-------------------------------------------------------------------------------------------------------------------------|
 * | 1byte|       1byte      |     1byte     |      2byte   |   6byte  |     2byte   |  
      1byte  |  2byte |   Nbyte    | 2byte|
 * -------------------------------------------------------------------------------------------------------------------------
 * <p/>
 * 0xF2: 帧开始标志;
 * Protocol Version:协议版本，详情见版本表(注 1);
 * Protocol Type:协议类型 升级协议为0x10,业务数据 0x00,绑定协议为 0x02;
 * Command Type:相关操作命令字,高字节为数据方向; Bit7~Bit7  数据源：10-服务器 01-手机 00-终端
 * Mac Addr:客户端 WIFI 模组的 MAC 地址 ACCF233BA86A;
 * Device Type:包括设备品牌【4】设备的类型，高字节大分类【1】，低字节小分类【1】，数据协议版本【1】，保留【1】;
 * Reserved:保留位;
 * Length:Frame body 的长度，汉枫模块不超过200 字节;
 * Frame Body:帧数据段字节数，合法值范围：0～1024(注)，汉枫模块不超过 200 字节;
 * FCS:帧数据段内容 CRC16 校验值(CRC-16/X25 X16+X12+X5+1),包含所有帧数据除外不包含0xF2;
 */
//f2 41 00 0007  accf23561508  0503  00  0016  00000000 01000103 01000000 00000000 00000001 0000 4885>  f2 41 02 0001  accf2356153a   0503 00 0000  f180
//f2 41 00 4007  accf2356153a  0003  00  0039 02413633 41313937 35423532 34343436 31304230 35304134 31423946 35353433 34400146 c0010001 01000000 00000000 00000000 00000400 089acb
//f2 41 00 4007  accf2356153a  0503  00  0039  02413633 41313937 35423532 34343436 31304230 35304134 31423946 35353433 34400146 c3010001 01000000 00000000 00000000 00000500 081062
#import "HETWIFICommonProtocol.h"
//#import "HETUserDefaultsPreference.h"
#import <sys/socket.h>
#import <sys/sysctl.h>
#import <net/if.h>
#import <net/if_dl.h>
#import <ifaddrs.h>
//#import <NSString+SAMAdditions.h>
#import <arpa/inet.h>

@implementation HETWIFICommonProtocol
+(HETWIFICommonReform*)transformData:(NSData *)data
{
    HETWIFICommonReform *obj = [[HETWIFICommonReform alloc] init];
    
    const char* bytes = [data bytes];
    int length = (int)data.length;
    char start1 = *bytes;
    unsigned short cmd = 0;
    unsigned short length1 =*(unsigned short *)(bytes + 14);
    unsigned long long macaddr=0;
    NTOHS(length1);
    //报文头不对
    if (start1 != (char)0xf2) {
        return nil;
    }
    //长度不等
    if (length1+18 != length) {
        return nil;
    }
    
    unsigned short temp1 = [self crc16with:(bytes+1) andlength:length-3];
    unsigned short crc = NTOHS(*(unsigned short *)(bytes +length -2));
    //unsigned short crc = *(unsigned short *)(bytes +length -2);
    //CRC校验失败
    if (crc != temp1) {
        return nil;
    }
    
    unsigned long long temp;
    memcpy((char *)&temp, bytes+5, 8);
    macaddr = (((unsigned long long )ntohl((unsigned int)((temp << 32) >> 32))) << 32) | (unsigned int)ntohl((int)(temp >> 32));//字节序转换等同于NTOHLL(temp);
    macaddr = macaddr>>16;
    NSString *mac = [[NSString stringWithFormat:@"%llx",macaddr] uppercaseString];
    char Pro_version = *(bytes+1);
    char Pro_type = *(bytes +2);
    cmd = (*(bytes +3))*256 + *(bytes +4);
    unsigned short Dev_type = NTOHS(*(unsigned short *)(bytes + 11));
    NSData *content = [NSData dataWithBytes:bytes+16 length:length1];
    
    obj.startflag=start1;
    obj.protocol_version=Pro_version;
    obj.protocol_type=Pro_type;
    obj.device_type=((Dev_type&0xff00)>>8);
    obj.device_subtype=(Dev_type&0x00ff);
    obj.device_mac=mac;
    obj.device_cmdtype=cmd;
    obj.body=content;
    obj.body_length=length1;
    obj.device_brand=1;
    obj.packetNum=(bytes[18]<<8) + bytes[19];
    obj.direction=bytes[16]&0xf0;
    obj.replay=bytes[16]&0x0f;
    return obj;
    
  
}
+(NSData *)fetchBindPacketWithObj:(HETWIFICommonReform *)obj  withUserKey:(NSString *)userKey{
    unsigned char ipArray[1];
    for(int i = 0;i<1;i++){
        //NSDictionary *dic = deviceInfo;
        NSString *iptr=obj.device_ip;//[dic objectForKey:@"ip"];
        unsigned char lastIpNum = [[[iptr componentsSeparatedByString:@"."] lastObject] integerValue];
        ipArray[i] = lastIpNum;
    }
    
    
    NSDictionary *serverDic = [[NSUserDefaults standardUserDefaults] objectForKey:@"HETServerConfig"];
    // NSString *md5 = [[NSUserDefaults standardUserDefaults] objectForKey:@"accountAndPassMd5Str"];
    if (!userKey) {
        return nil ;
    }

    NSString *md5 =userKey;//[[HETUserInfo userInfo].userId sam_MD5Digest];
    unsigned int ip = inet_addr([[serverDic objectForKey:@"serverIp"] UTF8String]);
    unsigned short port = [[serverDic objectForKey:@"serverPort"] shortValue];
    
    char content[38+1];
    memset(content, 0, 38+1);
    *(unsigned int *)(content) = ip;
    *(unsigned short *)(content +4) = htons(port);
    memcpy(content + 6, [md5 UTF8String], 32);
    memcpy(content + 38, ipArray, 1);
    /*NSMutableDictionary *packetdic = [[NSMutableDictionary alloc] init];
     [packetdic setObject:[NSData dataWithBytes:content length:38+1] forKey:@"data"];
     [packetdic setObject:@(0x4010) forKey:@"cmd"];
     [packetdic setObject:@(0x41) forKey:@"proversion"];
     [packetdic setObject:@(0x02) forKey:@"protype"];
     [packetdic setObject:@(0) forKey:@"devtype"];
     [packetdic setObject:@"000000000000" forKey:@"mac"];*/
    obj.body=[NSData dataWithBytes:content length:38+1];
    obj.device_cmdtype=0x4010;
    //obj.protocol_version=0x41;
    obj.protocol_type=0x02;
    //obj.device_type=0;
   // obj.device_mac=@"000000000000";
    
    NSData *contentData = obj.body;//[dic objectForKey:@"data"];
    char Pro_ver =obj.protocol_version;// [[dic objectForKey:@"proversion"] charValue];
    char Pro_type =obj.protocol_type ;//[[dic objectForKey:@"protype"] charValue];
    unsigned short temp1 = obj.device_cmdtype;//[[dic objectForKey:@"cmd"] shortValue];
    unsigned short cmd = HTONS(temp1);
    unsigned short temp2 = (obj.device_subtype&0x00ff)|((obj.device_type<<8)&0xff00);// obj.device_subtype;//[[dic objectForKey:@"devtype"] shortValue];
    unsigned short Dev_type = HTONS(temp2);
    NSString *macaddrstr = obj.device_mac;//[dic objectForKey:@"mac"];
    
    unsigned long long temp;
    NSScanner *scanner = [NSScanner scannerWithString:macaddrstr];
    (void) [scanner scanHexLongLong:&temp];
    unsigned long long macaddr;
    macaddr = (((unsigned long long )htonl((unsigned int)((temp << 32) >> 32))) << 32) | (unsigned int)htonl((int)(temp >> 32));
    macaddr = macaddr>>16;
    
    unsigned short temp3 = [contentData length];
    char retdata[18+temp3];
    unsigned short contentLength = temp3;
    HTONS(contentLength);
    retdata[0] = 0xf2;
    retdata[1] = Pro_ver;
    retdata[2] = Pro_type;
    memcpy(retdata+3, (char *)(&cmd), 2);
    memcpy(retdata+5, (char *)(& macaddr), 6);
    memcpy(retdata+11, (char *)(&Dev_type), 2);
    retdata[13] = 0;
    memcpy(retdata+14, (char *)(&contentLength), 2);
    memcpy(retdata+16, [contentData bytes], [contentData length]);
    unsigned short temp4 = [self crc16with:retdata+1 andlength:15+temp3];
    unsigned short crc = HTONS(temp4);
    memcpy(retdata+temp3+16, (char *)(& crc), 2);
    return [NSData dataWithBytes:retdata length:18+temp3];
}
+(NSData *)fetchLittleLoopPacketWithObj:(HETWIFICommonReform *)obj
{
    /*[packetdic setObject:[NSData dataWithBytes:buf length:(data.length)] forKey:@"data"];
    [packetdic setObject:@(0x4007) forKey:@"cmd"];
    [packetdic setObject:@(0x41) forKey:@"proversion"];
    [packetdic setObject:@(0x00) forKey:@"protype"];
    NSUInteger type = [self.devInfo[@"devtype"] integerValue];
    [packetdic setObject:@(type/1000+type%1000*256) forKey:@"devtype"];
    [packetdic setObject:self.deviceMac forKey:@"mac"];*/
    
    /*obj.device_cmdtype=0x4007;
    obj.protocol_version=0x41;
    obj.protocol_type=0x00;
    obj.device_subtype=0;
    obj.device_type=0;*/
    
    
    
    NSData *contentData =obj.body;// [dic objectForKey:@"data"];
    char Pro_ver =obj.protocol_version;// [[dic objectForKey:@"proversion"] charValue];
    char Pro_type =obj.protocol_type;// [[dic objectForKey:@"protype"] charValue];
    unsigned short temp1 =obj.device_cmdtype;// [[dic objectForKey:@"cmd"] shortValue];
    unsigned short cmd = HTONS(temp1);
    unsigned short temp2 =  (obj.device_subtype&0x00ff)|((obj.device_type<<8)&0xff00);//obj.device_subtype;// [[dic objectForKey:@"devtype"] shortValue];
    unsigned short Dev_type = HTONS(temp2);
    NSString *macaddrstr =obj.device_mac;// [dic objectForKey:@"mac"];
    
    unsigned long long temp;
    NSScanner *scanner = [NSScanner scannerWithString:macaddrstr];
    (void) [scanner scanHexLongLong:&temp];
    unsigned long long macaddr;
    macaddr = (((unsigned long long )htonl((unsigned int)((temp << 32) >> 32))) << 32) | (unsigned int)htonl((int)(temp >> 32));
    macaddr = macaddr>>16;
    
    unsigned short temp3 = [contentData length];
    char retdata[18+temp3];
    unsigned short contentLength = temp3;
    HTONS(contentLength);
    retdata[0] = 0xf2;
    retdata[1] = Pro_ver;
    retdata[2] = Pro_type;
    memcpy(retdata+3, (char *)(&cmd), 2);
    memcpy(retdata+5, (char *)(& macaddr), 6);
    memcpy(retdata+11, (char *)(& Dev_type), 2);
    retdata[13] = 0;
    memcpy(retdata+14, (char *)(&contentLength), 2);
    memcpy(retdata+16, [contentData bytes], [contentData length]);
    unsigned short temp4 = [self crc16with:retdata+1 andlength:15+temp3];
    unsigned short crc = HTONS(temp4);
    memcpy(retdata+temp3+16, (char *)(& crc), 2);
    return [NSData dataWithBytes:retdata length:18+temp3];
}
//CRC校验
+(unsigned short)crc16with:(const char *)data andlength:(int) length
{
    char j;
    int i;
    unsigned short retCrc16;
    retCrc16 = 0xffff;
    for(i=0;i<length;i++)
    {
        retCrc16 ^=((*data++)&0x000000ff);
        for(j = 0;j<8;j++){
            if(retCrc16&0x01)
            {
                retCrc16=(retCrc16>>1)^0x8408;
            }
            else{
                retCrc16>>=0x01;
            }
        }
    }
    return ~retCrc16;
}


@end
