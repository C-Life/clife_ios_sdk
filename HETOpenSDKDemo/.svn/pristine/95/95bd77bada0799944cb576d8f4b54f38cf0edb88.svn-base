/*
 BLETIOADProfile.m
 TIOADExample

 Created by Ole Andreas Torvmark on 11/22/12.
 Copyright (c) 2013 Texas Instruments. All rights reserved.

 */

#import "BLETIOADProfile.h"
#import "oad.h"

#import "CSleepBlueToothDefine.h"
#import "MattressBLEManagerApi.h"

@interface BLETIOADProfile()<CBPeripheralDelegate,CLBLEDataSource>
{
   
    LGPeripheral *currentLGPeripheral;
    NSDictionary *setupData;
    BOOL bStartUpgrate;
    BOOL bUpgrateComplete;


}
@property (nonatomic,strong) CLBLEManager* bleManager;
@property(nonatomic,strong) MattressBLEManagerApi* mattressBLEApi;
@property(nonatomic)BOOL isPopAlertView;

-(void) programmingTimerTick:(NSTimer *)timer;
-(void) imageDetectTimerTick:(NSTimer *)timer;

-(NSMutableArray *) findFWFiles;


-(BOOL) isCorrectImage;
-(void) completionDialog;
@end
@implementation BLETIOADProfile


-(instancetype)init{
    self=[super init];
    if (self) {
        if ([self conformsToProtocol:@protocol(CLBLEDataSource)]) {
            self.child=(id <CLBLEDataSource>)self;
            
        }
        self.bleManager=[CLBLEManager sharedInstance];
        //[self.bleManager addBleDelegate:self delegateQueue:dispatch_get_main_queue()];
        bUpgrateComplete=NO;
        bStartUpgrate=NO;
        _isPopAlertView = NO;
       
        
    }
    return self;
}


-(void)handleDisconnect:(NSNotification *) notification {
    NSLog(@"升级断开了");
    currentLGPeripheral=nil;
    if(bStartUpgrate)
    {
        if(self.iBlocks == self.nBlocks) {
            // We finished before disconnecting, don't display a failure.
            NSLog(@"升级断开了1");
            if(bUpgrateComplete)
            {
                NSLog(@"升级断开了2");
                //return;
            }
        }
        else if (_isPopAlertView == YES) {
            NSLog(@"升级断开了4");
            //return;
        }
        //_isPopAlertView = YES;
        /*[self.navCtrl popViewControllerAnimated:YES];


    UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"固件升级失败" message:@"设备断开连接在升级过程中，请重试" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    alertView.tag = 0;
    [alertView show];*/
        else
        {
        if (self.delegate && [self.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
            NSLog(@"升级断开了5");
            [self.delegate OADUpgradeHandleFail];
        }
        bStartUpgrate=NO;
        self.inProgramming = NO;
        self.canceled = YES;
        }
    }
    else
    {
        NSLog(@"升级断开了6");
     
        /*self.mattressBLEApi.currentBroadName=self.BLEBroadName;
        [[CLBLEManager sharedInstance] scanbleWithObject:self.mattressBLEApi withScanTimeOut:5];
        [[CLBLEManager sharedInstance]removeBleDelegate:self delegateQueue:dispatch_get_main_queue()];
        [[CLBLEManager sharedInstance] addBleDelegate:self delegateQueue:dispatch_get_main_queue()];*/
        __weak BLETIOADProfile *weakSelf=self;
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [[CLBLEManager sharedInstance]oadConntectPeripheralWithBLEDataSource:self.child withResultBlock:^(LGPeripheral *peripheral, NSError *error) {
                if(!error)
                {
                    currentLGPeripheral=peripheral;
                    [weakSelf beginUpgrade];
                }
                else
                {
                    //[weakSelf.navCtrl popToRootViewControllerAnimated:YES];
                    /*[weakSelf.navCtrl popViewControllerAnimated:YES];
                     UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"固件升级失败" message:@"设备断开连接在升级过程中，请重试" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                     alertView.tag = 0;
                     [alertView show];
                     weakSelf.inProgramming = NO;
                     weakSelf.canceled = YES;*/
                    if (weakSelf.delegate && [weakSelf.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
                        [weakSelf.delegate OADUpgradeHandleFail];
                    }
                    
                    
                }
                
                
                
            }];

        });
        
    }
    
}

/**
 *  初始化升级的Bin数据内容
 *
 *  @param binData 数据内容
 */
- (void)initUpgradeData:(NSData *)binData {
    if (!binData || binData.length <= 0) {
        if (self.delegate && [self.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
            [self.delegate OADUpgradeHandleFail];
        }
        return;
    }
  
     self.imageFile = binData;
     setupData = [[NSDictionary alloc] initWithObjectsAndKeys:@"0xF000FFC0-0451-4000-B000-000000000000", @"OAD Service UUID", @"0xF000FFC1-0451-4000-B000-000000000000", @"OAD Image Notify UUID", @"0xF000FFC2-0451-4000-B000-000000000000", @"OAD Image Block Request UUID", nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:kLGPeripheralDidDisconnect object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(handleDisconnect:)
                                                 name:kLGPeripheralDidDisconnect
                                               object:nil];


    
    
}


/**
 *  开始升级
 */
- (void)beginUpgrade{
    CBUUID *sUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Service UUID"]];
    CBUUID *cUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Image Notify UUID"]];
    //[currentPro setNotificationForCharacteristicWithCBUUID:sUUID cCBUUID:cUUID enable:YES];
    [self setNotificationForCharacteristicWithCBUUID:sUUID cCBUUID:cUUID enable:YES peripheral:currentLGPeripheral];
    
    
    
    
}
-(void)requestImageVersion
{
    bStartUpgrate=YES;
    unsigned char data = 0x00;
    [self sendData:[NSData dataWithBytes:&data length:1]];
    //[BLEUtility writeCharacteristic:self.d.p sCBUUID:sUUID cCBUUID:cUUID data:[NSData dataWithBytes:&data length:1]];
    self.imageDetectTimer = [NSTimer scheduledTimerWithTimeInterval:0.5f target:self selector:@selector(imageDetectTimerTick:) userInfo:nil repeats:NO];
    self.imgVersion = 0xFFFF;
    self.start = YES;
    [self performSelector:@selector(valitversion) withObject:nil afterDelay:1];

}
-(void)valitversion
{
    if ([self isCorrectImage]) [self uploadImage];
    else {
        // [self.navCtrl popToRootViewControllerAnimated:YES];
        /*[self.navCtrl popViewControllerAnimated:YES];
        UIAlertView *wrongImage = [[UIAlertView alloc]initWithTitle:@"Wrong image type !" message:[NSString stringWithFormat:@"Image that was selected was of type : %c, which is the same as on the peripheral, please select another image",(self.imgVersion & 0x01) ? 'B' : 'A'] delegate:nil cancelButtonTitle:@"Cancel" otherButtonTitles: nil];
        [wrongImage show];*/
        if (self.delegate && [self.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
            [self.delegate OADUpgradeHandleFail];
        }

    }
  
}

-(void) uploadImage {
    self.inProgramming = YES;
    self.canceled = NO;
    
    unsigned char imageFileData[self.imageFile.length];
    [self.imageFile getBytes:imageFileData];
    uint8_t requestData[OAD_IMG_HDR_SIZE + 2 + 2]; // 12Bytes
    
    for(int ii = 0; ii < 20; ii++) {
        NSLog(@"%02hhx",imageFileData[ii]);
    }
    
    
    img_hdr_t imgHeader;
    memcpy(&imgHeader, &imageFileData[0 + OAD_IMG_HDR_OSET], sizeof(img_hdr_t));
    
    
    
    requestData[0] = LO_UINT16(imgHeader.ver);
    requestData[1] = HI_UINT16(imgHeader.ver);
    
    requestData[2] = LO_UINT16(imgHeader.len);
    requestData[3] = HI_UINT16(imgHeader.len);
    
    NSLog(@"Image version = %04hx, len = %04hx",imgHeader.ver,imgHeader.len);
    
    memcpy(requestData + 4, &imgHeader.uid, sizeof(imgHeader.uid));
    
    requestData[OAD_IMG_HDR_SIZE + 0] = LO_UINT16(12);
    requestData[OAD_IMG_HDR_SIZE + 1] = HI_UINT16(12);
    
    requestData[OAD_IMG_HDR_SIZE + 2] = LO_UINT16(15);
    requestData[OAD_IMG_HDR_SIZE + 1] = HI_UINT16(15);

   // CBUUID *sUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Service UUID"]];
   // CBUUID *cUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Image Notify UUID"]];

    //[BLEUtility writeCharacteristic:self.d.p sCBUUID:sUUID cCBUUID:cUUID data:[NSData dataWithBytes:requestData length:OAD_IMG_HDR_SIZE + 2 + 2]];
    
    [self sendData:[NSData dataWithBytes:requestData length:OAD_IMG_HDR_SIZE + 2 + 2]];
    
    
    self.nBlocks = imgHeader.len / (OAD_BLOCK_SIZE / HAL_FLASH_WORD_SIZE);
    self.nBytes = imgHeader.len * HAL_FLASH_WORD_SIZE;
    self.iBlocks = 0;
    self.iBytes = 0;
   
  
    [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(programmingTimerTick:) userInfo:nil repeats:NO];
    
}

-(void) programmingTimerTick:(NSTimer *)timer {
    if (self.canceled) {
        self.canceled = FALSE;
        return;
    }
    
    unsigned char imageFileData[self.imageFile.length];
    [self.imageFile getBytes:imageFileData];

    //Prepare Block
    uint8_t requestData[2 + OAD_BLOCK_SIZE];
    
    // This block is run 4 times, this is needed to get CoreBluetooth to send consequetive packets in the same connection interval.
    for (int ii = 0; ii < 4; ii++) {
        
        requestData[0] = LO_UINT16(self.iBlocks);
        requestData[1] = HI_UINT16(self.iBlocks);
        
        memcpy(&requestData[2] , &imageFileData[self.iBytes], OAD_BLOCK_SIZE);
        
        //CBUUID *sUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Service UUID"]];
        //CBUUID *cUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Image Block Request UUID"]];
        
        //[BLEUtility writeNoResponseCharacteristic:self.d.p sCBUUID:sUUID cCBUUID:cUUID data:[NSData dataWithBytes:requestData length:2 + OAD_BLOCK_SIZE]];
        //[self sendData:[NSData dataWithBytes:requestData length:2 + OAD_BLOCK_SIZE]];
        [self sendImageData:[NSData dataWithBytes:requestData length:2 + OAD_BLOCK_SIZE]];
        
        self.iBlocks++;
        self.iBytes += OAD_BLOCK_SIZE;
        
        if(self.iBlocks == self.nBlocks) {
            /*if ([BLEUtility runningiOSSeven]) {
                [self.navCtrl popToRootViewControllerAnimated:YES];
            }
            else [self.progressDialog dismissWithClickedButtonIndex:0 animated:YES];*/
           // [self.navCtrl popToRootViewControllerAnimated:YES];
            bUpgrateComplete=YES;
           // [self.navCtrl popViewControllerAnimated:YES];
            self.inProgramming = NO;
           // [self completionDialog];
            if (self.delegate && [self.delegate respondsToSelector:@selector(OADUpgradeHandleProgress:)]) {
                [self.delegate OADUpgradeHandleProgress:(float)((float)self.iBlocks / (float)self.nBlocks)];
                //NSLog(@"progress01 = %f", ((float)self.iBlocks / (float)self.nBlocks));
            }
            return;
        }
        else {
            if (ii == 3)[NSTimer scheduledTimerWithTimeInterval:0.09 target:self selector:@selector(programmingTimerTick:) userInfo:nil repeats:NO];
        }
    }
    if (self.delegate && [self.delegate respondsToSelector:@selector(OADUpgradeHandleProgress:)]) {
        [self.delegate OADUpgradeHandleProgress:(float)((float)self.iBlocks / (float)self.nBlocks)];
        NSLog(@"progress = %f", ((float)self.iBlocks / (float)self.nBlocks));
    }

}


/*-(void) didUpdateValueForProfile:(CBCharacteristic *)characteristic {
    if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Image Notify UUID"]]]) {
        if (self.imgVersion == 0xFFFF) {
            unsigned char data[characteristic.value.length];
            [characteristic.value getBytes:&data];
            self.imgVersion = ((uint16_t)data[1] << 8 & 0xff00) | ((uint16_t)data[0] & 0xff);
            NSLog(@"self.imgVersion : %04hx",self.imgVersion);
         }
        NSLog(@"OAD Image notify : %@",characteristic.value);
        
    }
}
-(void) didWriteValueForProfile:(CBCharacteristic *)characteristic error:(NSError *)error {
    NSLog(@"didWriteValueForProfile : %@",characteristic);
}
*/
- (void)receiveUpgradeData:(NSData *)receiveData {
    NSLog(@"receiveData = %@", receiveData);
    if (self.imgVersion == 0xFFFF) {
        unsigned char data[receiveData.length];
        [receiveData getBytes:&data];
        self.imgVersion = ((uint16_t)data[1] << 8 & 0xff00) | ((uint16_t)data[0] & 0xff);
        NSLog(@"self.imgVersion : %04hx",self.imgVersion);
    }

    
}


-(NSMutableArray *) findFWFiles {
    NSMutableArray *FWFiles = [[NSMutableArray alloc]init];
    
    NSArray *paths = NSSearchPathForDirectoriesInDomains (NSDocumentDirectory,NSUserDomainMask, YES);
    NSString *publicDocumentsDir = [paths objectAtIndex:0];
    
    NSError *error;
    NSArray *files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:publicDocumentsDir error:&error];
    
    
    if (files == nil) {
        NSLog(@"Could not find any firmware files ...");
        return FWFiles;
    }
    for (NSString *file in files) {
        if ([file.pathExtension compare:@"bin" options:NSCaseInsensitiveSearch] == NSOrderedSame) {
            NSString *fullPath = [publicDocumentsDir stringByAppendingPathComponent:file];
            [FWFiles addObject:fullPath];
        }
    }

    return FWFiles;
}



-(BOOL) isCorrectImage {
    unsigned char imageFileData[self.imageFile.length];
    [self.imageFile getBytes:imageFileData];
    
    img_hdr_t imgHeader;
    memcpy(&imgHeader, &imageFileData[0 + OAD_IMG_HDR_OSET], sizeof(img_hdr_t));
    
    
    //if (imgHeader.ver & 0x01)  return YES;
    
    if ((imgHeader.ver & 0x01) != (self.imgVersion & 0x01)) return YES;
    return NO;
}

-(void) imageDetectTimerTick:(NSTimer *)timer {
    //IF we have come here, the image userID is B.
    NSLog(@"imageDetectTimerTick:");
   // CBUUID *sUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Service UUID"]];
   // CBUUID *cUUID = [CBUUID UUIDWithString:[self.d.setupData valueForKey:@"OAD Image Notify UUID"]];
    unsigned char data = 0x01;
    //[BLEUtility writeCharacteristic:self.d.p sCBUUID:sUUID cCBUUID:cUUID data:[NSData dataWithBytes:&data length:1]];
    [self sendData:[NSData dataWithBytes:&data length:1]];
}

-(void) completionDialog {
    UIAlertView *complete;
        complete = [[UIAlertView alloc]initWithTitle:@"Firmware upgrade complete" message:@"Firmware upgrade was successfully completed, device needs to be reconnected" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [complete show];
}

/**
 *  开始发送数据
 *
 *  @param data 将要发送的数据
 */
- (void) sendData: (NSData *)data {
    //NSLog(@"%d-%@",perPackageCount,data);
    //if (currentPro) {
//        if ([currentPro getCurrentWriteCharacteristic]) {
//            
//            [currentPro.peripheral writeValue:data forCharacteristic:[currentPro getCurrentWriteCharacteristic] type:CBCharacteristicWriteWithoutResponse];
//        }
        CBUUID *sUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Service UUID"]];
        CBUUID *cUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Image Notify UUID"]];
       // [currentPro writeCharacteristicWithsCBUUID:sUUID cCBUUID:cUUID data:data];
   // }
    [self writeCharacteristicWithsCBUUID:sUUID cCBUUID:cUUID data:data peripheral:currentLGPeripheral];
}
- (void) sendImageData: (NSData *)data {
    //NSLog(@"%d-%@",perPackageCount,data);
   
        CBUUID *sUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Service UUID"]];
        CBUUID *cUUID = [CBUUID UUIDWithString:[setupData valueForKey:@"OAD Image Block Request UUID"]];
        //[currentPro writeNoResponseCharacteristicwithsCBUUID:sUUID cCBUUID:cUUID data:data];
    [self writeNoResponseCharacteristicwithsCBUUID:sUUID cCBUUID:cUUID data:data peripheral:currentLGPeripheral];
  
}
-(void)setNotifyValue:(LGPeripheral *)peripheral characteristic:(LGCharacteristic *)characteristic
{
    if (peripheral.cbPeripheral.state != CBPeripheralStateConnected) {
        return;
    }
    [characteristic setNotifyValue:YES completion:^(NSError *error) {
        
        
        NSLog(@"%@", error);
        
    } onUpdate:^(NSData *data, NSError *error) {
        NSLog(@"%@",data);
        [self receiveUpgradeData:data];
        
    }];
    
}


#pragma mark------打开读取数据通道
-(void)setNotificationForCharacteristicWithCBUUID:(CBUUID *)sCBUUID cCBUUID:(CBUUID *)cCBUUID enable:(BOOL)enable  peripheral:(LGPeripheral *)peripheral{
   /*for ( LGService *service in peripheral.services ) {
        NSLog(@"service.cbService.UUID:%@,%@",service.cbService.UUID,sCBUUID);
        if ([service.cbService.UUID isEqual:sCBUUID]) {
            for (LGCharacteristic *characteristic in service.characteristics ) {
                NSLog(@"service.cbService.characteristic:%@,%@",characteristic,cCBUUID);
                if ([characteristic.cbCharacteristic.UUID isEqual:cCBUUID])
                {
    
                    [self setNotifyValue:peripheral characteristic:characteristic];
                    
                    
                }
                
            }
        }
    }*/
    __weak BLETIOADProfile* weakSelf=self;
    [peripheral discoverServicesWithCompletion:^(NSArray *services, NSError *error) {
        if(error)
        {
            if (weakSelf.delegate && [weakSelf.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
             [weakSelf.delegate OADUpgradeHandleFail];
             }

            return;
        }
        for(LGService *service in services)
        {
            [service discoverCharacteristicsWithCompletion:^(NSArray *characteristics, NSError *error) {
                if([service.cbService.UUID isEqual:sCBUUID])
                {
                    LGCharacteristic *notifyCharacteristic =[weakSelf findCharacteristic:peripheral WithCBUUID:sCBUUID cCBUUID:cCBUUID];
                    if (notifyCharacteristic) {
                        [notifyCharacteristic setNotifyValue:YES completion:^(NSError *error) {
                            if(error)
                            {
                                NSLog(@"setNotifyValueError:%@",error);
                                if (weakSelf.delegate && [weakSelf.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
                                    [weakSelf.delegate OADUpgradeHandleFail];
                                }

                            }
                            else
                            {
                                [weakSelf requestImageVersion];
                            }
                           
                            
                        } onUpdate:^(NSData *data, NSError *error) {
                            if(error)
                            {
                                if (weakSelf.delegate && [weakSelf.delegate respondsToSelector:@selector(OADUpgradeHandleFail)]) {
                                    [weakSelf.delegate OADUpgradeHandleFail];
                                }

                            }
                            else
                            {
                               [weakSelf receiveUpgradeData:data];
                            }
                            
                            
                        }];
                        
                    }
                    
                }
            }];
            
        }
    }];


}
#pragma mark------打开写数据通道，有回应
-(void)writeCharacteristicWithsCBUUID:(CBUUID *)sCBUUID cCBUUID:(CBUUID *)cCBUUID data:(NSData *)data  peripheral:(LGPeripheral *)peripheral{
    // Sends data to BLE peripheral to process HID and send EHIF command to PC
    for ( LGService *service in peripheral.services ) {
        if ([service.cbService.UUID isEqual:sCBUUID]) {
            for ( LGCharacteristic *characteristic in service.characteristics ) {
                if ([characteristic.cbCharacteristic.UUID isEqual:cCBUUID]) {
                    /* EVERYTHING IS FOUND, WRITE characteristic ! */
                    //[peripheral.cbPeripheral writeValue:data forCharacteristic:characteristic type:CBCharacteristicWriteWithResponse];
                    
                    [characteristic writeValue:data completion:^(NSError *error) {
                        //NSLog(@"*************************************************************");
                        //NSLog(@"*************************************************************");
                        NSLog(@"4 %@",characteristic.cbCharacteristic.UUID);
                        NSLog(@"data%@",data);
                        
                        //NSLog(@"------------------------------------------------------------");
                        //NSLog(@"------------------------------------------------------------");
                        
                    }];
                    
                  
                }
            }
        }
    }
}
#pragma mark------打开写数据通道，无回应
-(void)writeNoResponseCharacteristicwithsCBUUID:(CBUUID *)sCBUUID cCBUUID:(CBUUID *)cCBUUID data:(NSData *)data  peripheral:(LGPeripheral *)peripheral{
    // Sends data to BLE peripheral to process HID and send EHIF command to PC
    for (LGService *service in peripheral.services ) {
        if ([service.cbService.UUID isEqual:sCBUUID]) {
            for ( LGCharacteristic *characteristic in service.characteristics ) {
                if ([characteristic.cbCharacteristic.UUID isEqual:cCBUUID]) {
                    /* EVERYTHING IS FOUND, WRITE characteristic ! */
                    [characteristic writeValue:data completion:nil];
                    
                    NSLog(@"*************************************************************");
                    NSLog(@"*************************************************************");
                    NSLog(@"2 %@",characteristic.cbCharacteristic
                          .UUID);
                    NSLog(@"data%@",data);
                    
                    NSLog(@"------------------------------------------------------------");
                    NSLog(@"------------------------------------------------------------");
                }
            }
        }
    }
}
//根据service和charact找到指定的特征值
- (LGCharacteristic *)findCharacteristic:(LGPeripheral *)peripheral WithCBUUID:(CBUUID *)sCBUUID cCBUUID:(CBUUID *)cCBUUID
{
    if (peripheral.cbPeripheral.state == CBPeripheralStateConnected) {
        for (LGService *service in peripheral.services) {
            //            NSLog(@"service uuid-%@", service.UUIDString);
            
            // Finding out our service
            if ([service.cbService.UUID isEqual:sCBUUID]) {
                for (LGCharacteristic *charact in service.characteristics) {
                    //                     NSLog(@"characteristic uuid-%@", charact.cbCharacteristic.UUID);
                    if ([charact.cbCharacteristic.UUID isEqual:cCBUUID]) {
                        
                        return charact;
                    }
                    
                }
            }
            
            
        }
    }
    
    
    return nil;
}

#pragma mark - CLBLEDataSource
-(NSString*)broadName{
    return self.BLEBroadName;
}
-(LGPeripheral*)connectedPeripheral
{
    return self.bleManager.currentLGPeripheral;
}
-(NSArray*)scanServiceArray{
    return @[[CBUUID UUIDWithString:CSLEEP_SERVICE_UUID]];
}

-(NSString*)readSeriveID{
    return CSLEEP_SERVICE_UUID;
}

-(NSString*)readCharacteristicID{
    return CSLEEP_READ_CHARACTER_UUID;
}

-(NSString*)writeSeriveID{
    return CSLEEP_SERVICE_UUID;
}

-(NSString*)writeCharacteristicID{
    return CSLEEP_WRITE_CHARACTER_UUID;
}

-(void)dealloc
{
    [self.bleManager removeBleDelegate:self delegateQueue:dispatch_get_main_queue()];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
}
@end





