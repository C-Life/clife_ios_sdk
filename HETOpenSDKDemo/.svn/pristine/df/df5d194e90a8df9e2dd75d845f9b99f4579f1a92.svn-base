//
//  HETBLEMattressDevice.m
//  HETOpenSDKDemo
//
//  Created by mr.cao on 16/2/18.
//  Copyright © 2016年 mr.cao. All rights reserved.
//

#import "HETBLEMattressDevice.h"
#import "HETBLEManagerApi.h"
#import "HETBLEProtocol.h"
#import <UIKit/UIKit.h>
#import "HETDeviceControlBusiness.h"
#import "HETURLRequestHelper.h"
@interface HETBLEMattressDevice()
{
    HETBLEManagerApi *_hetBLEManagerApi;
    NSString *_deviceId;
  
}
@property(nonatomic,strong) UIAlertView *blueToothPowerAlert;
@end


@implementation HETBLEMattressDevice
static HETBLEMattressDevice *_sharedInstance = nil;
+ (HETBLEMattressDevice *)sharedInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[HETBLEMattressDevice alloc] init];
    });
    return _sharedInstance;
}



-(void )initBLEBroadName:(NSString *)broadName  withDeviceId:(NSString*)deviceId{
    
    NSAssert(broadName, @"broadName为空");
    NSAssert(deviceId, @"deviceId为空");
    _deviceId=deviceId;
    
    if(_hetBLEManagerApi)
    {
        
        _hetBLEManagerApi.currentBroadName=broadName;
        
    }
    else
    {
        _hetBLEManagerApi=[[HETBLEManagerApi alloc]init];
        _hetBLEManagerApi.currentPeripheral=nil;
        _hetBLEManagerApi.currentBroadName=broadName;
    }
    
    
}

-(instancetype)init{
    if (self=[super init])
    {
        //调用下这个蓝牙提前初始化，防止获取蓝牙状态的时候状态错乱
        [[CLBLEManager sharedInstance]manager];
        
        
        _hetBLEManagerApi=[[HETBLEManagerApi alloc]init];
        _hetBLEManagerApi.currentPeripheral=nil;
        [[NSNotificationCenter defaultCenter] removeObserver:self name:kLGPeripheralDidDisconnect object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(checkBleDisconnect:) name:kLGPeripheralDidDisconnect object:nil];
        [[NSNotificationCenter defaultCenter] removeObserver:self name:kLGPeripheralDidUpdateState object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showBLEPowerState:) name:kLGPeripheralDidUpdateState object:nil];
    }
    return self;
}
-(void)dealloc
{
    [[NSNotificationCenter defaultCenter ]removeObserver:self];
}
/**
 *  检测蓝牙断开
 */
- (void)checkBleDisconnect:(NSNotification*)notification {
    
    _hetBLEManagerApi.currentPeripheral=nil;
}

-(void)showBLEPowerState:(NSNotification*)notification{
    NSDictionary* dic=[notification userInfo];
    NSNumber* state=[dic objectForKey:kLGPeripheralDidUpdateState];
    if (state.intValue!=CBCentralManagerStatePoweredOn) {
        
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.blueToothPowerAlert show];
        });
    }
    else{
        [self.blueToothPowerAlert dismissWithClickedButtonIndex:0 animated:YES];
    }
}


-(UIAlertView*)blueToothPowerAlert{
    if (!_blueToothPowerAlert) {
        _blueToothPowerAlert = [[UIAlertView alloc] initWithTitle: @"蓝牙设置" message:@"手机蓝牙未开启，请先打开手机蓝牙." delegate:self cancelButtonTitle:@"关闭" otherButtonTitles:nil, nil];
    }
    return _blueToothPowerAlert;
}


/**
 *  获取历史数据
 *
 *  @param success
 *  @param fail
 */
-(void)fetchHistoryDataWithSuccessBlock:(void(^)())successBlock
                              FailBlock:(void(^)(NSError* error))failBlock
                       ProgressiveBlock:(void (^)(NSInteger totalBytesRead, NSInteger totalBytesExpected))progressiveBlock
{
    [_hetBLEManagerApi setProgressiveBlock:^(NSInteger totalBytesRead, NSInteger totalBytesExpected) {
        NSLog(@"===datareceive===%ld,%ld",(long)totalBytesRead,(long)totalBytesExpected);
        
        progressiveBlock(totalBytesRead,totalBytesExpected);
    }];
    
    
    [_hetBLEManagerApi fetchHistoryDataWithSuccessBlock:^(NSData *data) {
        
        HETBLEReform *transFormData = [HETBLEProtocol transformData:data];
        if (transFormData.body.length > 0) {
            //上传历史数据，上传历史数据成功后需要删除历史数据
            //successBlock(transFormData.body);
            NSLog(@"上传历史数据: %@",transFormData.body);
            
            
            HETDeviceControlBusiness *business=[[HETDeviceControlBusiness alloc]init];
            
            [business uploadDeviceDataWithDeviceID:_deviceId dataType:HETBLEDeviceHistoryDataUploadType data:data success:^(id responseObject) {
                NSLog(@"上传历史数据成功:%@",responseObject);
                successBlock();
                
                //删除历史数据
                [self deleteHistoryDataWithSuccessBlock:^(NSData *data) {
                    NSLog(@"删除历史数据成功:%@",data);
                } FailBlock:^(NSError *error) {
                    NSLog(@"删除历史数据失败:%@",error);
                }];
            } failure:^(NSError *error) {
                NSLog(@"上传历史数据失败:%@",error);
                failBlock(error);
                
            }];
            
        }
        else
        {
            NSLog(@"历史数据为空");
            successBlock();
        }
        
        
    } FailBlock:^(NSError *error) {
        failBlock(error);
    }];
}



/**
 *  清除历史数据
 *
 *  @param success
 *  @param fail
 */
-(void)deleteHistoryDataWithSuccessBlock:(void(^)(NSData* data))successBlock
                               FailBlock:(void(^)(NSError* error))failBlock
{
    [_hetBLEManagerApi deleteHistoryDataWithSuccessBlock:^(NSData *data) {
        
           successBlock(data);
        
    } FailBlock:^(NSError *error) {
        
        failBlock(error);
        
    }];
}


-(void)fetchRealTimeDataWithSuccessBlock:(void(^)(HETBLEMattressDeviceInfo *deviceInfo))successBlock
                               FailBlock:(void(^)(NSError* error))failBlock
{
    [_hetBLEManagerApi fetchRealTimeDataSuccessBlock:^(NSData *data) {
        HETBLEReform *transFormData = [HETBLEProtocol transformData:data];
        if (transFormData.body.length > 0) {
            //上传历史数据，上传历史数据成功后需要删除历史数据
            //successBlock(transFormData.body);
            NSLog(@"上传历史数据: %@",transFormData.body);
            
            int heartValue=1;
            int breathValue=1;
            int turnOverValue=1;
            int batteryValue=1;
            int snoreValue=1;
            unsigned char havePeople = 1;//是否有人（新协议）
            unsigned char fault = 1;//故障代码（新协议）
            
            
            //协议版本判断
            if (transFormData.protocol_version == 0x01)//新协议
            {
                [transFormData.body getBytes:&heartValue range:NSMakeRange(0, 1)];
                [transFormData.body getBytes:&breathValue range:NSMakeRange(1, 1)];
                [transFormData.body getBytes:&havePeople range:NSMakeRange(2, 1)];
                [transFormData.body getBytes:&turnOverValue range:NSMakeRange(3, 1)];
                if(transFormData.body.length>5){
                    [transFormData.body getBytes:&batteryValue range:NSMakeRange(4, 1)];
                }
                [transFormData.body getBytes:&fault range:NSMakeRange(5, 1)];
                
                
                //将第三个字节再进行解析（第三个字节包含两个信息Bit0: 呼吸暂停  Bit1: 有人(1)/无人(0)）
                if(havePeople&0x02)//有人
                {
                    havePeople = 1;
                }
                else//无人
                {
                    havePeople = 0;
                }
                
                
                NSLog(@"heartValue=%d,  breathValue=%d,  havePeople=%d,  turnOverValue=%d,  batteryValue=%d,  fault=%d",heartValue,breathValue,havePeople,turnOverValue,batteryValue,fault);
                
             
            }
            else if (transFormData.protocol_version == 0x00)//旧协议
            {
                [transFormData.body getBytes:&heartValue range:NSMakeRange(0, 1)];
                [transFormData.body getBytes:&breathValue range:NSMakeRange(1, 1)];
                [transFormData.body getBytes:&snoreValue range:NSMakeRange(2, 1)];
                [transFormData.body getBytes:&turnOverValue range:NSMakeRange(3, 1)];
                
                if(transFormData.body.length>4){
                    [transFormData.body getBytes:&batteryValue range:NSMakeRange(4, 1)];
                }
                NSLog(@"heartValue=%d,  breathValue=%d,  turnOverValue=%d,  batteryValue=%d 带子协议版本 == %d",heartValue,breathValue,turnOverValue,batteryValue,transFormData.protocol_version);
                
                
            }
            HETBLEMattressDeviceInfo *info=[[HETBLEMattressDeviceInfo alloc]init];
            info.heartValue=heartValue;
            info.breathValue=breathValue;
            info.turnOverValue=turnOverValue;
            info.breathValue=batteryValue;
            info.fault=fault;
            info.snoreValue=snoreValue;
            info.havePeople=havePeople;
            successBlock(info);
            
            //上传实时数据到服务器
            HETDeviceControlBusiness *business=[[HETDeviceControlBusiness alloc]init];
            
            NSString *timeZone=[HETURLRequestHelper currentTimeOffset] ;
            int zone = timeZone.intValue*60/100;
            
            
            //使用UTC时间
            NSString * dataTime = [[[NSDate date] description] substringWithRange:NSMakeRange(0, 19)];
            
            NSDictionary * realTimeDic = @{
                                           @"timeZone" : @(zone),
                                           @"heartRate" : @(heartValue),
                                           @"breathRate" : @(breathValue),
                                           @"turnOverTimes" : @(turnOverValue),
                                           @"snoreTimes" : @(snoreValue),
                                           @"hasAnybody" : @(havePeople),
                                           @"dataTime" : dataTime
                                           };
            
            NSLog(@"上传到服务器的数据realTimeDic == %@",realTimeDic);
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:realTimeDic options:NSJSONWritingPrettyPrinted error:&err];
            
            
            [business uploadDeviceDataWithDeviceID:_deviceId dataType:HETBLEDeviceRealTimeDataUploadType data:jsonData success:^(id responseObject) {
                NSLog(@"上传实时数据成功:%@",responseObject);
                
                } failure:^(NSError *error) {
                NSLog(@"上传实时数据失败:%@",error);
                failBlock(error);
                
            }];


        }
    } FailBlock:^(NSError *error) {
        failBlock(error);
 
    }];
}
@end
